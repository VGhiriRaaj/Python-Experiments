class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data

    def insert(self, data1):
        if data1 < self.data:
            if self.left is None:
                self.left = Node(data1)
            else:
                self.left.insert(data1)
        elif data1 > self.data:
            if self.right is None:
                self.right = Node(data1)
            else:
                self.right.insert(data1)

    def delete(self, val):
        if val < self.data:
            if self.left:
                self.left = self.left.delete(val)
        elif val > self.data:
            if self.right:
                self.right = self.right.delete(val)
        else:
            if self.left is None and self.right is None:
                return None
            elif self.left is None:
                return self.right
            elif self.right is None:
                return self.left
            else:
                min_val = self.right.find_minimum()
            self.data = min_val
            self.right = self.right.delete(min_val)
        return self

    def find_minimum(self):
        current = self
        while current.left:
            current = current.left
        return current.data

    def printTree(self):
        if self.left:
            self.left.printTree()
        print(self.data, end=",")
        if self.right:
            self.right.printTree()


# Example usage
root = Node(20)
root.insert(16)
root.insert(24)
root.insert(12)
root.insert(18)
root.insert(11)
root.insert(13)
root.insert(15)
root.insert(19)
root.insert(22)
root.insert(27)
root.insert(21)
root.insert(23)
root.insert(25)
root.insert(29)
# root.printTree()
#
# print()

root = root.delete(24)
root.printTree()
