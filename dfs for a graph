class Graph:
    def __init__(self):
        self.graph = {}

    def add_node(self, node):
        if node not in self.graph:
            self.graph[node] = []

    # here we are travelling from node1 to node2
    def add_edge(self, node1, node2):
        if node1 in self.graph and node2 in self.graph:
            self.graph[node1].append(node2)

    def print_graph(self):
        for node, neighbors in self.graph.items():
            print(f"Node {node}: {neighbors}")

    def depth_first_traversal(self, start_node):
        visited = set()

        def dfs_util(node):
            visited.add(node)
            print(node, end=" ")
            for neighbor in self.graph[node]:
                if neighbor not in visited:
                    dfs_util(neighbor)

        dfs_util(start_node)


graph = Graph()

nodes = ["Delhi", "Bangalore", "Hyderabad", "Chennai", "Tirupati"]
for node in nodes:
    graph.add_node(node)

edges = [("Delhi", "Bangalore"),
         ("Bangalore", "Chennai"),
         ("Delhi", "Hyderabad"),
         ("Delhi", "Chennai"),
         ("Hyderabad", "Tirupati"),
         ("Bangalore", "Tirupati"),
         ("Chennai", "Tirupati")]
for edge in edges:
    graph.add_edge(edge[0], edge[1])

graph.depth_first_traversal("Delhi")
