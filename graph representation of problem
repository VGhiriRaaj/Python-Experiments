class GraphNode:
    def __init__(self):
        self.children = [None for _ in range(26)]
        self.wordCount = 0


def insert_key(root, key):
    currentNode = root

    for c in key:
        if not currentNode.children[ord(c) - ord('a')]:
            newNode = GraphNode()
            currentNode.children[ord(c) - ord('a')] = newNode

        currentNode = currentNode.children[ord(c) - ord('a')]

    currentNode.wordCount += 1


def print_trie(node, prefix):
    if node.wordCount > 0:
        print(prefix, "(", node.wordCount, ")")

    for i, child in enumerate(node.children):
        if child:
            char = chr(ord('a') + i)
            print_trie(child, prefix + char)


root = GraphNode()

input = ["animal", "and", "anaconda", "answer", "angle", "ananda", "cat", "card", "camel", "caterpillar",
                 "will", "make"]
input_strings = sorted(input)
n = len(input_strings)

for i in range(n):
    insert_key(root, input_strings[i])

print("Trie Graph:")
print_trie(root, "")
