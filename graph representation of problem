class Graph:
    def __init__(self):
        self.graph = {}

    def add_node(self, node):
        if node not in self.graph:
            self.graph[node] = []

    def add_edge(self, node1, node2):
        if node1 in self.graph and node2 in self.graph:
            self.graph[node1].append(node2)
            # self.graph[node2].append(node1)

    def print_graph(self):
        for node, neighbors in self.graph.items():
            print(f"Node {node}: {neighbors}")


def create_alphabet_graph(words):
    graph = Graph()

    for word in words:
        for i in range(len(word)):
            letter = word[i]
            graph.add_node(letter)

            if i > 0:
                prev_letter = word[i - 1]
                graph.add_edge(prev_letter, letter)

    return graph



word_list = ["animal", "and", "anaconda", "answer", "angle", "ananda", "cat", "card", "camel", "caterpillar", "will",
             "make"]
updated_words = sorted(word_list)
graph = create_alphabet_graph(updated_words)

graph.print_graph()
