class Graph:
    def __init__(self):
        self.graph = {}

    def add_node(self, node):
        if node not in self.graph:
            self.graph[node] = []

    # here we are travelling from node1 to node2
    def add_edge(self, node1, node2):
        if node1 in self.graph and node2 in self.graph:
            self.graph[node1].append(node2)

    def print_graph(self):
        for node, neighbors in self.graph.items():
            print(f"Node {node}: {neighbors}")
            
    def find_all_paths(self, start, end, path=[]):
        path = path + [start]
        if start == end:
            return [path]
        if start not in self.graph:
            return []
        paths = []
        for node in self.graph[start]:
            if node not in path:
                new_paths = self.find_all_paths(node, end, path)
                for new_path in new_paths:
                    paths.append(new_path)
        return paths


graph = Graph()

nodes = ["Delhi", "Bangalore", "Hyderabad", "Chennai", "Tirupati"]
for node in nodes:
    graph.add_node(node)

edges = [("Delhi", "Bangalore"),
         ("Bangalore", "Chennai"),
         ("Delhi", "Hyderabad"),
         ("Delhi", "Chennai"),
         ("Hyderabad", "Tirupati"),
         ("Bangalore", "Tirupati"),
         ("Chennai", "Tirupati")]
for edge in edges:
    graph.add_edge(edge[0], edge[1])

graph.print_graph()

paths = graph.find_all_paths('Delhi', 'Tirupati')
for path in paths:
    print(path)
