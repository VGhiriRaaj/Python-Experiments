class GraphNode:
    def __init__(self):
        self.children = [None for _ in range(26)]
        self.wordCount = 0


def insert_key(root, key):
    currentNode = root

    for c in key:
        if not currentNode.children[ord(c) - ord('a')]:
            newNode = GraphNode()
            currentNode.children[ord(c) - ord('a')] = newNode

        currentNode = currentNode.children[ord(c) - ord('a')]

    currentNode.wordCount += 1


def get_words_with_prefix(root, prefix):
    currentNode = root

    for c in prefix:
        if not currentNode.children[ord(c) - ord('a')]:
            return []

        currentNode = currentNode.children[ord(c) - ord('a')]

    words = []
    collect_words(currentNode, prefix, words)

    return words


def collect_words(node, prefix, words):
    if node.wordCount > 0:
        words.append(prefix)

    for i, child in enumerate(node.children):
        if child:
            char = chr(ord('a') + i)
            collect_words(child, prefix + char, words)


root = GraphNode()

input = ["animal", "and", "anaconda", "answer", "angle", "ananda", "cat", "card", "camel", "caterpillar",
         "will", "make"]
input_strings = sorted(input)
n = len(input_strings)

for i in range(n):
    insert_key(root, input_strings[i])

search_query_strings = ["ana"]

search_queries = len(search_query_strings)

for i in range(search_queries):
    prefix = search_query_strings[i]
    words_with_prefix = get_words_with_prefix(root, prefix)
    print("Words with prefix '", prefix, "':", words_with_prefix)
