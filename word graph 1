class GraphNode:
    def __init__(self):
        self.children = [None for _ in range(26)]
        self.wordCount = 0


def add_word(root, word):
    currentNode = root

    for c in word:
        if not currentNode.children[ord(c) - ord('a')]:
            newNode = GraphNode()
            currentNode.children[ord(c) - ord('a')] = newNode

        currentNode = currentNode.children[ord(c) - ord('a')]

    currentNode.wordCount += 1


def print_wordGraph(node, prefix):
    if node.wordCount > 0:
        print(prefix, "(", node.wordCount, ")")

    for i, child in enumerate(node.children):
        if child:
            char = chr(ord('a') + i)
            print_wordGraph(child, prefix + char)


def get_top_words(node, prefix, word_count_list):
    if prefix.startswith(user_prefix) and node.wordCount > 0:
        word_count_list.append((prefix, node.wordCount))

    for i, child in enumerate(node.children):
        if child:
            char = chr(ord('a') + i)
            get_top_words(child, prefix + char, word_count_list)


root = GraphNode()

word_list = ["animal", "and", "anaconda", "answer", "angle", "ananda", "cat", "card", "camel", "caterpillar", "will", "make"]
for word in word_list:
    add_word(root, word)

num_words = int(input("Enter the number of words to add: "))
for _ in range(num_words):
    word = input("Enter a word: ")
    add_word(root, word)

user_prefix = input("Enter the prefix: ")

word_count_list = []
get_top_words(root, "", word_count_list)

# Sort the word-count list in descending order based on word count
word_count_list.sort(key=lambda x: x[1], reverse=True)

# Filter the word-count list by the user prefix and print the first three words with the highest word count
filtered_words = [(word, count) for word, count in word_count_list if word.startswith(user_prefix)]
print(f"Words with highest word count starting with '{user_prefix}':")
for word, count in filtered_words[:3]:
    print(word, "(", count, ")")
